{"version":3,"sources":["services/phonebook.js","components/PersonForm.js","PhonebookApp2.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Person","person","removePerson","name","number","onClick","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Persons","persons","map","p","FilterPersons","someFilter","handleFilter","Notification","message","class_name","className","PhonebookApp","useState","setPersons","setNewName","setNewNumber","setFilter","successMessage","setSuccessMessage","errorMessage","setErrorMessage","personsToShow","filter","includes","useEffect","phonebookService","initialPersons","event","target","preventDefault","newPerson","matchedPersons","length","concat","catch","error","setTimeout","matchedPerson","window","confirm","ReactDOM","render","PhonebookApp2","document","getElementById"],"mappings":"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","file":"static/js/main.92f1b678.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n} ;\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n} ;\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n} ;\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n} ;\n\nexport default { getAll, create, update, remove } ;","import React from 'react'\n\nconst Person = ({ person, removePerson }) => {\n  return (\n    <li><b>{person.name}</b> / {person.number}\n        <button onClick={removePerson}>delete</button>\n    </li>\n  )\n}\n\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\n    return (\n        <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange}/></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    )\n}\n\nconst Persons = ({ persons, removePerson }) => {\n    return (\n        <div>\n            {persons.map(p => <Person key={p.name} person={p} removePerson={() => removePerson(p)} />)}\n        </div>\n    )\n}\n\nconst FilterPersons = ({ someFilter, handleFilter }) => {\n    return (\n      <form>\n        <div><input value={someFilter} onChange={handleFilter} /></div>\n      </form>\n    )\n} ;\n\nexport { PersonForm, Persons, FilterPersons } ;","import React, { useState, useEffect } from 'react'\nimport phonebookService from './services/phonebook'\nimport { Persons, PersonForm, FilterPersons } from './components/PersonForm.js'\n\nconst Notification = ({ message, class_name }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={class_name}>\n      {message}\n    </div>\n  )\n}\n\nconst PhonebookApp = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ someFilter, setFilter ] = useState('')\n  const [ successMessage, setSuccessMessage ] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilter = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const personsToShow = persons.filter(p => p.name.includes(someFilter))\n\n  const addPerson = (event) => {\n        event.preventDefault()\n        const newPerson = {\n            name: newName,\n            number: newNumber\n        }\n\n        const matchedPersons = persons.filter(p => p.name === newPerson.name)\n\n        if (matchedPersons.length === 0) {\n            phonebookService\n              .create(newPerson)\n              .then(p => {\n                setPersons(persons.concat(p))\n                setNewName('')\n                setNewNumber('')\n              })\n              .catch(error => {\n                setErrorMessage(error.response.data.error)\n                setTimeout(() => { setErrorMessage(null) }, 5000)\n              })\n        } else {\n            const matchedPerson = { ...matchedPersons[0], number: newNumber }\n            if (window.confirm(`${matchedPerson.name} is already in the phonebook, replace old number with new one?`)) {\n                phonebookService\n                  .update(matchedPerson.id, matchedPerson)\n                  .then(p => {\n                    setPersons(persons.map(person => person.id !== matchedPerson.id ? person : matchedPerson))\n                    setNewName('')\n                    setNewNumber('')\n                    setSuccessMessage(`Phone number for ${matchedPerson.name} updated.`)\n                    setTimeout(() => { setSuccessMessage(null) }, 5000)\n                  })\n                  .catch(error => {\n                    if (error.response.data.error) {\n                        setErrorMessage(error.response.data.error)\n                    } else {\n                        setErrorMessage(`An error occurred while updating phonebook entry for ${matchedPerson.name}.`)\n                    }\n                    setTimeout(() => { setErrorMessage(null) }, 5000)\n                  })\n            }\n        }\n  }\n\n  const removePerson = (person) => {\n      if (window.confirm(`Delete ${person.name}?`)) {\n        phonebookService\n          .remove(person.id)\n          .then(() => {\n            setPersons(persons.filter(p => p.id !== person.id))\n          })\n      }\n  }\n\n  useEffect(() => {\n    phonebookService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n\n      <Notification message={successMessage} class_name=\"success\" />\n      <Notification message={errorMessage} class_name=\"error\" />\n\n      <h2>Filter Entries</h2>\n      <FilterPersons someFilter={someFilter} handleFilter={handleFilter} />\n\n      <h2>Add New Entry</h2>\n      <PersonForm\n        addPerson={addPerson} newName={newName} handleNameChange={handleNameChange}\n        newNumber={newNumber} handleNumberChange={handleNumberChange}\n      />\n\n      <h2>Numbers</h2>\n      <Persons\n        persons={personsToShow}\n        removePerson={removePerson}\n      />\n\n    </div>\n  )\n}\n\nexport default PhonebookApp ;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PhonebookApp2 from './PhonebookApp2';\n\nReactDOM.render(\n  <PhonebookApp2 />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}